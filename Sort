//简单插入排序，折半查找排序，快速排序，选择排序
#include <iostream>
#include <stdio.h>
#include <malloc.h>
#define OK 1
#define ERROR 0
#define MAXSIZE 20
#define LT(a,b)  ((a)<(b))
using namespace std;

typedef struct 
{
    int key;
    int otherinfo;
}RedType;
typedef struct 
{
    RedType r[MAXSIZE + 1];
    int length;
}SqList;

void Traverse(SqList L)
{
    cout << endl;
    cout << "The list is: ";
    for(int i = 1;i <= L.length;i++)
    {
        cout << L.r[i].key << " " ;
    }
    cout << endl;
}

int Partition(SqList &L,int low,int high)
{
	int pivotkey;
    L.r[0] = L.r[low];
    pivotkey = L.r[low].key;
    while(low < high)
    {
        while(low < high && L.r[high].key >= pivotkey) 
            --high;
        L.r[low]=L.r[high];
        while(low < high && L.r[low].key <= pivotkey)
            ++low;
        L.r[high] = L.r[low];
    }
    L.r[low] = L.r[0];
    return low;
}

int SelectMinKey(SqList &L,int i)
{
    int k, j;
    k = i;
    for(j = i;j < L.length + 1;j++)
        if(L.r[k].key > L.r[j].key)	
            k = j;
    return k;
}

void QSort(SqList &L,int low,int high)
{
    int pivotloc;
    if(low < high)
    {
        pivotloc = Partition(L,low,high);
        QSort(L,low,pivotloc - 1);
        QSort(L,pivotloc + 1,high);
    }
}

void InsertSort(SqList &L)
{
    int i,j;
    for(i = 2;i <= L.length;++i)
    {
        if(LT(L.r[i].key,L.r[i-1].key))
        {
            L.r[0] = L.r[i];
            L.r[i] = L.r[i - 1];
            for(j = i-1; LT(L.r[0].key,L.r[j].key); --j)		
                L.r[j+1] = L.r[j];
            L.r[j+1] = L.r[0];
        }
    }
}

void BInsertSort(SqList &L)
{
    int i,j;
    int low,high,m;
    for(i = 2;i <= L.length;++i)
    {
        L.r[0] = L.r[i];
        low = 1;high = i-1;
        while(low <= high)
        {
            m = (low + high) / 2;
            if (LT(L.r[0].key,L.r[m].key))	
            	high = m - 1;
            else low = m + 1;
        }
        for(j = i-1;j >= high + 1;--j)	
        	L.r[j + 1] = L.r[j];
        L.r[high + 1] = L.r[0];
    }
}

void QuickSort(SqList &L)
{
    QSort(L,1,L.length);
}

void SelectSort(SqList &L)
{
    RedType t;
    int i,j;
    for(i = 1;i < L.length;++i)
    {
        j = SelectMinKey(L,i);
        if(i !=j )
        {
            t = L.r[i];
            L.r[i] = L.r[j];
            L.r[j] = t;
        }
    }
}

int main()
{
    int choice;
    while(1)   
    {     
        cout << "------------------------------------------------" << endl;        
        int a[8] ={49,38,65,97,76,13,27,49};
        SqList L;
        int i;
        for(i = 1;i <= 8;i++)
            L.r[i].key = a[i - 1];
        L.length = i - 1;
        Traverse(L);

        cout << "1.InsertSort     2.BInsertSort" << endl;
        cout << "3.QuickSort      4.SelectSort" << endl; 
        cout << "5.Exit" << endl;
    
        cout << "Choose the number: " ; cin >> choice;
        switch(choice)
        {
            case 1:InsertSort(L);Traverse(L);break;
            case 2:BInsertSort(L);Traverse(L);break;
            case 3:QuickSort(L);Traverse(L);break;
            case 4:SelectSort(L);Traverse(L);break;
            case 5:
            {
                system("pause");return 0;
            }
            default:break;
        }
        cout << "------------------------------------------------" << endl;

    }
}

