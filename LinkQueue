#include <iostream>
#include <stdio.h>
#include <malloc.h>
#define OK 1
#define ERROR 0
using namespace std;

typedef struct QNode
{
    int data;
    struct QNode *next;
}*Queuestr;
typedef struct 
{
    Queuestr front;
    Queuestr rear;
}LinkQueue;

Queuestr head,p,q;

int InitQueue(LinkQueue &Q)
{
    head = (Queuestr)malloc(sizeof(QNode));
    Q.front = Q.rear = head;
    if(!Q.front)
        exit(0);
    Q.front ->next = NULL;
}

int DestroyQueue(LinkQueue &Q)
{
    while(Q.front)
   {
        Q.rear = Q.front->next;
        free(Q.front);
        Q.front = Q.rear;
   }
   return OK;
}

int ClearQueue(LinkQueue &Q)
{
   Q.rear = Q.front;
   p = Q.front->next;
   Q.front -> next = NULL;
   while(p)
   {
        q = p;
        p = p -> next;
        free(q);
   }
   return OK;
}

int QueueEmpty(LinkQueue Q)
{
    if(Q.front == Q.rear)
        cout << "Empty!!" << endl;
    else
        cout << "Not Empty!!" << endl;
    return OK;
}

int QueueLength(LinkQueue Q)
{
    int length = 0;
    p = Q.front -> next;
    while(p)
    {
        length++;
        p = p -> next;
    }
    return length;
}

int GetHead(LinkQueue Q)
{
    return Q.front -> next -> data;
}

int EnQueue(LinkQueue &Q,int &e)
{
    p = (Queuestr)malloc(sizeof(QNode));
    if(!p)
        exit(0);
    p -> data = e;
    p -> next = NULL;
    Q.rear -> next = p;
    Q.rear = p;
    return OK;
}

int DeQueue(LinkQueue &Q,int &e)
{
    if(Q.front == Q.rear)
        return ERROR;
    p = Q.front -> next;
    e = p -> data;
    Q.front -> next = p -> next;
    if(Q.rear == p)
        Q.rear = Q.front;
    free(p);
    return OK;
}

int Display(LinkQueue Q)
{
    p = Q.front -> next;
    while(p)
    {
        cout << p -> data << " ";
        p = p -> next;
    }
    cout << endl;
    return OK;
}

int main()
{
    int a,choice;
    int Insert_Number,Delete_Number;
    LinkQueue Q;
    InitQueue(Q);
    cout << "Tnit successfully! The length is: " << QueueLength(Q) <<endl;
    while(1)
    {
        cout << "----------------------------------------------------------" << endl;
        cout << "0.display  1.insert  2.delete  3.clear  4.Empty  5.gethead  6.exit" << endl;
        cout << "----------------------------------------------------------" << endl;
        cout << "Input choice: ";
        cin >> choice;
        switch(choice)
        {
            case 0:
                Display(Q);
                break;
            case 1:
                cout << "Input the inserted number: ";
                cin >> Insert_Number;
                EnQueue(Q,Insert_Number);
                cout << "Insert sucessfully!" << endl;
                cout << "The Queue now is: " ;Display(Q);
                cout << endl << "The Length is: " << QueueLength(Q) << endl;
                break;
            case 2:
                DeQueue(Q,Delete_Number);
                cout << "Delete sucessfully!" << endl;
                cout << "The deleted number is: " <<Delete_Number << endl; 
                cout << "The Queue now is: " ;Display(Q);
                cout << endl << "The Length is: " << QueueLength(Q) << endl;
                break;
            case 3:
                ClearQueue(Q);
                cout << "clear sucessfully!" << endl;
                cout << "The Queue now is: " ;Display(Q);
                cout << endl << "The Length is: " << QueueLength(Q) << endl;
                break;
            case 4:
                QueueEmpty(Q);break;
            case 5:
                cout << "The head number is: " << GetHead(Q) << endl;break;
            case 6:exit(0);
        }
        cout << endl << endl;
    } 
    system("pause");
    return 0;
}
