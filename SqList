#include <iostream>
#include <stdio.h>
#include <malloc.h>
#define LIST_INIT_SIZE 100
#define LISTINCREMENT 10
#define OK 1
#define ERROR 0
#define OVERFLOW 0
using namespace std;

typedef struct 
{
    int *elem; // 存储空间基址
    int length; // 当前长度
    int listsize; // 当前分配的存储容量(以sizeof(ElemType)为单位)
}SqList;

int InitList(SqList &L) 
{ // 操作结果：构造一个空的顺序线性表
    L.elem=(int*)malloc(LIST_INIT_SIZE*sizeof(int));
    if(!L.elem)
        exit(OVERFLOW); // 存储分配失败
    L.length=0; // 空表长度为0
    L.listsize=LIST_INIT_SIZE; // 初始存储容量
    return OK;
}

int ListInsert(SqList &L,int i,int e)//L中第i个位置前插入元素e
{
    int *newbase, *q, *p;
    if(i < 1 || i > L.length +1)
        return ERROR;
    if(L.length >= L.listsize)
    {
        newbase = (int *)realloc(L.elem,(L.listsize + LISTINCREMENT) * sizeof(int));
        if(!newbase)
            exit(0);
        L.elem = newbase;      //新基址
        L.listsize += LISTINCREMENT;
    }
    q = &(L.elem[i-1]);
    for(p = &(L.elem[L.length - 1]);p >= q;--p)
        *(p + 1) = *p;
    *q = e;
    L.length++;
}

void ListDelete(SqList &L,int &e)
{
    int i = 0;
    int *p;
    for(i = 0;i < L.length;i++)
    {
        if(L.elem[i] > 5)
        {
            for(p = &L.elem[i];p < &L.elem[L.length - 1];p++)
                *p = *(p + 1);
            L.length--;
//            cout << "length" << L.length << endl;
            i = 0;
        }
    }
}

int ClearList(SqList &L) 
{      
    if (!L.elem) 
        return ERROR; 
    L.length = 0;  
    return OK;
}

int ListLength(SqList L)
{
    return L.length;
}

int GetElem(SqList L,int i,int &e)
{
    if(i < 0 || i > L.length - 1)
        exit(0);
    return L.elem[i-1];
}

int ListTraverse(SqList L,int i)
{
    for(i = 0;i < L.length;i++)
        cout << L.elem[i] << endl;
    return OK;
}
int GetSum(SqList L,int i,int &sum)
{
    if(i < 0 || i > L.length - 1)
        exit(0);
    for(i = 0;i < L.length;i++)
        sum += L.elem[i];
    return sum;
}

void destoryList(SqList &L) {
    free(L.elem); //释放存储空间
    L.length = 0;
    L.listsize = 0;
//  free(&L);
}
int main()
{
    SqList L;
    int e,e0;
    int i,j,k;
    int num;
    i = InitList(L);
    for(j = 1;j <= 100;j++)
        i = ListInsert(L,1,j);
    cout << "length: " << ListLength(L) << endl;
    cout << ListTraverse(L,i) << endl;
    cout << "3rd elem: " << GetElem(L,3,e) << endl;
    cout << "sum: " << GetSum(L,0,e) << endl;
    ListDelete(L,e);
    cout << "delated length: " << ListLength(L) << endl;
    cout << ListTraverse(L,i) << endl;
    ClearList(L);
    cout << "cleared length: " << ListLength(L) << endl;
    destoryList(L);
    cout << "destoryed length: " << ListLength(L) << endl;
    system("pause");
}
